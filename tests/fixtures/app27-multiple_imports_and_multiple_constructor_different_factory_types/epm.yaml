jobs:

- name: setStorageBase1
  job:
    set:
      val: 5

- name: setStorageBase2
  job:
    set:
      val: 17

- name: deployGSFactory
  job:
    deploy:
      contract: GSFactory.sol
      instance: GSFactory
      wait: true

# Begin with single constructor contract
- name: deployGSABIFactorySingle
  job:
    deploy:
      contract: GSFactory.sol
      instance: GSSingle
      wait: true

- name: createGSContractSingle
  job:
    call:
      destination: $deployGSFactory
      data: createSingle $setStorageBase1
      abi: $deployGSFactory
      wait: true

# Double check created address on single constructor
- name:  getGSAddrSingle
  job:
    query-contract:
      destination: $deployGSFactory
      data: getLastSingle
      abi: $deployGSFactory

- name: assertAddrSingle
  job:
    assert:
      key: $getGSAddrSingle
      relation: eq
      val: $createGSContractSingle

# Test initialized value from construction is equal to setStorageBase1
- name: queryStorageSingle
  job:
    query-contract:
      destination: $createGSContractSingle
      data: get
      abi: $deployGSABIFactorySingle

- name: assertStorageSingle
  job:
    assert:
      key: $queryStorageSingle
      relation: eq
      val: $setStorageBase1

# Set a new value to ensure constructors can be overwritten
- name: setStorageSingle
  job:
    call:
      destination: $createGSContractSingle
      data: set $setStorageBase2
      abi: $deployGSABIFactorySingle
      wait: true

- name: queryStorageSingleNew
  job:
    query-contract:
      destination: $createGSContractSingle
      data: get
      abi: $deployGSABIFactorySingle

- name: assertStorageSingleNew
  job:
    assert:
      key: $queryStorageSingleNew
      relation: eq
      val: $setStorageBase2

# Now Multi constructor Contract
- name: deployGSABIFactoryMulti
  job:
    deploy:
      contract: GSFactory.sol
      instance: GSMulti
      wait: true

- name: createGSContractMulti
  job:
    call:
      destination: $deployGSFactory
      data: createMulti $setStorageBase1 $setStorageBase2
      abi: $deployGSFactory
      wait: true

# Double check created address on single constructor
- name:  getGSAddrMulti
  job:
    query-contract:
      destination: $deployGSFactory
      data: getLastMulti
      abi: $deployGSFactory

- name: assertAddrMulti
  job:
    assert:
      key: $getGSAddrMulti
      relation: eq
      val: $createGSContractMulti

# Test initialized value from construction is equal to setStorageBase1
- name: queryStorageMultiFirst
  job:
    query-contract:
      destination: $createGSContractMulti
      data: getFirst
      abi: $deployGSABIFactoryMulti

- name: assertStorageMultiFirst
  job:
    assert:
      key: $queryStorageMultiFirst
      relation: eq
      val: $setStorageBase1

- name: queryStorageMultiSecond
  job:
    query-contract:
      destination: $createGSContractMulti
      data: getSecond
      abi: $deployGSABIFactoryMulti

- name: assertStorageMultiSecond
  job:
    assert:
      key: $queryStorageMultiSecond
      relation: eq
      val: $setStorageBase2

# Set a new value to ensure constructors can be overwritten
- name: setStorageMulti
  job:
    call:
      destination: $createGSContractMulti
      data: set $setStorageBase2 $setStorageBase1
      abi: $deployGSABIFactoryMulti
      wait: true

- name: queryStorageMultiNewFirst
  job:
    query-contract:
      destination: $createGSContractMulti
      data: getFirst
      abi: $deployGSABIFactoryMulti

- name: assertStorageMultiNewFirst
  job:
    assert:
      key: $queryStorageMultiNewFirst
      relation: eq
      val: $setStorageBase2

- name: queryStorageMultiNewSecond
  job:
    query-contract:
      destination: $createGSContractMulti
      data: getSecond
      abi: $deployGSABIFactoryMulti

- name: assertStorageMultiNewSecond
  job:
    assert:
      key: $queryStorageMultiNewSecond
      relation: eq
      val: $setStorageBase1
